---
# Kubernetes 클러스터 설치 및 구성 통합 Playbook
# Based on: https://kubernetes.io/ko/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

# Containerd
# Based on: https://github.com/containerd/containerd/blob/main/docs/getting-started.md

- name: Kubernetes 공통 환경 준비
  hosts: k8s_cluster
  become: true

  vars_prompt:
    - name: ansible_become_pass
      prompt: "BECOME password"
      private: yes

  tasks:
    - name: Step 1 - Hostname 설정
      block:
        - name: 호스트 이름 변경
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"

    - name: Step 2 - 네트워크 확인
      block:
        - name: 네트워크 어댑터 확인
          ansible.builtin.shell: |
            ip -o link show | awk -F': ' '{print $2}'
          args:
            executable: /bin/bash
          register: iface_names
          changed_when: false

        - name: 네트워크 어댑터 출력
          ansible.builtin.debug:
            msg: "{{ iface_names.stdout_lines }}"

        - name: 필수 포트 리스트 정의
          set_fact:
            required_ports:
              - 6443       # kube-apiserver
              - 2379       # etcd
              - 2380       # etcd
              - 10250      # kubelet
              - 10259      # kube-scheduler
              - 10257      # kube-controller-manager

        - name: 포트 리스닝 상태 확인 (간단 요약 출력)
          # 쉘 명령을 사용해서 포트별로 'PORT: LISTENING <프로세스>' 또는 'PORT: CLOSED' 출력
          ansible.builtin.shell: |
            if ss -tulpn 2>/dev/null | grep -E -- '-[: ]{{ item }}\b|:{{ item }}\b' >/dev/null 2>&1; then
              echo "{{ item }}: LISTENING"
              # 같은 포트로 여러 항목 뜰 수 있으니 줄 단위로 요약
              ss -tulpn 2>/dev/null | grep -E -- '-[: ]{{ item }}\b|:{{ item }}\b' | awk '{printf "  %s %s %s\n", $1, $5, $7}'
            else
              echo "{{ item }}: CLOSED"
            fi
          loop: "{{ required_ports }}"

    - name: Step 3 - 시스템 사전 설정
      block:
        - name: 필수 커널 모듈 로드
          ansible.builtin.modprobe:
            name: "{{ item }}"
            state: present
          loop:
            - overlay
            - br_netfilter

        - name: 커널 모듈 영구 설정
          ansible.builtin.copy:
            dest: /etc/modules-load.d/k8s.conf
            content: |
              overlay
              br_netfilter

        - name: sysctl 파라미터 설정
          ansible.builtin.copy:
            dest: /etc/sysctl.d/k8s.conf
            content: |
              net.bridge.bridge-nf-call-iptables  = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              net.ipv4.ip_forward                 = 1

        - name: sysctl 파라미터 적용
          ansible.builtin.command: sysctl --system

        - name: swap 비활성화
          ansible.builtin.command: swapoff -a

        - name: fstab에서 swap 제거
          ansible.builtin.replace:
            path: /etc/fstab
            regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
            replace: '# \1'

    - name: Step 4 - 컨테이너 런타임 설치 (containerd)
      block:
        # containerd를 아카이브로 설치하기 때문에 의존성을 따로 설치해야한다.
        - name: containerd 의존성 설치
          ansible.builtin.apt:
            name:
              - runc
            state: present
            update_cache: true

        - name: containerd 아카이브 다운로드
          ansible.builtin.get_url:
            url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
            dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
            mode: '0644'

        - name: containerd SHA256 체크섬 다운로드
          ansible.builtin.get_url:
            url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz.sha256sum"
            dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz.sha256sum"
            mode: '0644'

        - name: SHA256 체크섬 검증
          ansible.builtin.shell: |
            cd /tmp
            sha256sum -c containerd-{{ containerd_version }}-linux-amd64.tar.gz.sha256sum
          args:
            executable: /bin/bash
          changed_when: false

        - name: containerd 압축 해제
          ansible.builtin.unarchive:
            src: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
            dest: /usr/local
            remote_src: yes
            creates: /usr/local/bin/containerd

        - name: systemd 서비스 디렉토리 생성
          ansible.builtin.file:
            path: /usr/local/lib/systemd/system
            state: directory
            mode: '0755'

        - name: containerd.service 파일 다운로드
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
            dest: /usr/local/lib/systemd/system/containerd.service
            mode: '0644'

        - name: systemd daemon 리로드
          ansible.builtin.systemd:
            daemon_reload: yes

        - name: /etc/containerd 디렉토리 생성
          ansible.builtin.file:
            path: /etc/containerd
            state: directory
            mode: '0755'

        - name: containerd 기본 설정 생성
          ansible.builtin.shell: |
            /usr/local/bin/containerd config default > /etc/containerd/config.toml
          args:
            creates: /etc/containerd/config.toml

        - name: containerd 재시작 및 활성화
          ansible.builtin.systemd:
            name: containerd
            enabled: true
            state: restarted

    - name: Step 5 - kubeadm, kubelet 및 kubectl 설치
      block:
        - name: Kubernetes 설치를 위한 필수 패키지 설치
          ansible.builtin.apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gpg
            state: present
            update_cache: true

        - name: Kubernetes GPG 키 다운로드 및 변환
          ansible.builtin.shell: |
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          args:
            creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        - name: Kubernetes apt repository 추가
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /"
            filename: kubernetes
            state: present
            update_cache: yes

        - name: kubelet, kubeadm, kubectl 설치
          ansible.builtin.apt:
            name:
              - kubelet
              - kubeadm
              - kubectl
            state: present
            update_cache: true

        - name: kubelet, kubeadm, kubectl 버전 고정
          ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl

        - name: kubelet 서비스 enable & start
          ansible.builtin.systemd:
            name: kubelet
            enabled: true
            state: started