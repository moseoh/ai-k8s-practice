---
# Kubernetes 클러스터 초기화 및 노드 Join Playbook
# Prerequisites: setup-k8s-nodes.yml이 실행 완료된 상태여야 함

# Control Plane 초기화
- name: Control Plane 초기화
  hosts: control_plane
  become: true
  vars_prompt:
    - name: ansible_become_pass
      prompt: "BECOME password"
      private: yes

  tasks:
    - name: Step 1 - kubeadm 초기화 상태 확인
      block:
        - name: Kubernetes 클러스터 상태 확인
          ansible.builtin.stat:
            path: /etc/kubernetes/admin.conf
          register: k8s_initialized

        - name: 초기화 상태 출력
          ansible.builtin.debug:
            msg: "Kubernetes cluster already initialized: {{ k8s_initialized.stat.exists }}"

    - name: Step 2 - Control Plane 초기화
      block:
        - name: 기존 kubelet 서비스 중지
          ansible.builtin.systemd:
            name: kubelet
            state: stopped
            enabled: false
            daemon_reload: true
          when: not k8s_initialized.stat.exists
          failed_when: false

        - name: kubeadm 설정 파일 생성
          ansible.builtin.copy:
            dest: /tmp/kubeadm-config.yaml
            content: |
              kind: InitConfiguration
              apiVersion: kubeadm.k8s.io/v1beta4
              nodeRegistration:
                criSocket: unix:///run/containerd/containerd.sock
              ---
              kind: ClusterConfiguration
              apiVersion: kubeadm.k8s.io/v1beta4
              networking:
                podSubnet: {{ pod_network_cidr }}
              controlPlaneEndpoint: "{{ ansible_default_ipv4.address }}:6443"
              ---
              kind: KubeletConfiguration
              apiVersion: kubelet.config.k8s.io/v1beta1
              cgroupDriver: systemd
          when: not k8s_initialized.stat.exists

        - name: kubeadm init 실행 (Pod Network CIDR 포함)
          ansible.builtin.command: |
            kubeadm init --config=/tmp/kubeadm-config.yaml
          register: kubeadm_init
          when: not k8s_initialized.stat.exists

        - name: kubeadm init 결과 저장
          ansible.builtin.copy:
            content: "{{ kubeadm_init.stdout }}"
            dest: /root/kubeadm_init_output.txt
          when: not k8s_initialized.stat.exists

    - name: Step 3 - kubeconfig 설정 및 kubelet 재시작
      block:
        - name: 사용자 홈 디렉토리의 .kube 디렉토리 생성
          ansible.builtin.file:
            path: "/home/{{ ansible_user }}/.kube"
            state: directory
            mode: '0755'

        - name: admin.conf를 사용자 kubeconfig로 복사
          ansible.builtin.copy:
            src: /etc/kubernetes/admin.conf
            dest: "/home/{{ ansible_user }}/.kube/config"
            remote_src: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: '0600'

        - name: GCP 클러스터 kubeconfig를 로컬 PC로 다운로드
          ansible.builtin.fetch:
            src: "/home/{{ ansible_user }}/.kube/config"
            dest: ~/.kube/config-gcp-k8s
            flat: yes

        - name: kubelet 서비스 활성화 및 재시작
          ansible.builtin.systemd:
            name: kubelet
            state: restarted
            enabled: true
            daemon_reload: true

    - name: Step 4 - CNI (Calico) 설치
      block:
        - name: Calico 네트워크 플러그인 설치 확인
          ansible.builtin.shell: |
            kubectl get pods -n calico-system --no-headers 2>/dev/null | wc -l
          register: calico_installed
          changed_when: false
          failed_when: false

        - name: Tigera Operator 설치
          ansible.builtin.shell: |
            kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/tigera-operator.yaml
          when: calico_installed.stdout | int == 0

        - name: Calico 커스텀 리소스 다운로드 및 수정
          ansible.builtin.shell: |
            curl https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/custom-resources.yaml -o /tmp/custom-resources.yaml
            sed -i 's|192.168.0.0/16|{{ pod_network_cidr }}|g' /tmp/custom-resources.yaml
          when: calico_installed.stdout | int == 0

        - name: Calico 커스텀 리소스 설치
          ansible.builtin.shell: |
            kubectl create -f /tmp/custom-resources.yaml
          when: calico_installed.stdout | int == 0

        - name: Calico 설치 상태 확인
          ansible.builtin.shell: |
            kubectl get pods -n calico-system
          register: calico_status
          when: calico_installed.stdout | int == 0

        - name: Calico 설치 결과 출력
          ansible.builtin.debug:
            msg: "{{ calico_status.stdout_lines }}"
          when: calico_installed.stdout | int == 0

    - name: Step 5 - Join 토큰 생성 및 저장
      block:
        - name: 새로운 Join 토큰 생성
          ansible.builtin.shell: |
            kubeadm token create --print-join-command
          register: join_command

        - name: Join 명령어 저장
          ansible.builtin.copy:
            content: "{{ join_command.stdout }}"
            dest: /tmp/kubeadm_join_command.sh
            mode: '0755'

        - name: Join 명령어를 fact로 설정
          ansible.builtin.set_fact:
            kubeadm_join_cmd: "{{ join_command.stdout }}"

        - name: Join 명령어 출력
          ansible.builtin.debug:
            msg: "Join command: {{ kubeadm_join_cmd }}"

# Worker Node Join
- name: Worker Node를 클러스터에 조인
  hosts: nodes
  become: true
  vars_prompt:
    - name: ansible_become_pass
      prompt: "BECOME password"
      private: yes

  tasks:
    - name: Step 1 - Node Join 상태 확인
      block:
        - name: kubelet 설정 파일 확인
          ansible.builtin.stat:
            path: /etc/kubernetes/kubelet.conf
          register: node_joined

        - name: Join 상태 출력
          ansible.builtin.debug:
            msg: "Node already joined: {{ node_joined.stat.exists }}"

    - name: Step 2 - Control Plane에서 Join 명령어 가져오기
      block:
        - name: Control Plane에서 join 명령어 복사
          ansible.builtin.slurp:
            src: /tmp/kubeadm_join_command.sh
          register: join_command_content
          delegate_to: "{{ groups['control_plane'][0] }}"
          when: not node_joined.stat.exists

        - name: Join 명령어 디코드
          ansible.builtin.set_fact:
            join_cmd: "{{ join_command_content.content | b64decode }}"
          when: not node_joined.stat.exists

    - name: Step 3 - Worker Node Join 실행
      block:
        - name: 클러스터에 노드 조인
          ansible.builtin.shell: "{{ join_cmd }}"
          when: not node_joined.stat.exists
          register: join_result

        - name: Join 결과 출력
          ansible.builtin.debug:
            msg: "{{ join_result.stdout }}"
          when: not node_joined.stat.exists

# 클러스터 상태 확인
- name: 클러스터 설정 마무리
  hosts: control_plane
  become: true
  vars_prompt:
    - name: ansible_become_pass
      prompt: "BECOME password"
      private: yes

  tasks:
    - name: Worker 노드 레이블링
      block:
        - name: 일반 Worker 노드 레이블 설정
          ansible.builtin.shell: |
            {% for node in groups['nodes'] %}
            kubectl label node {{ node }} node-role.kubernetes.io/worker=worker --overwrite
            {% endfor %}
          when: groups['nodes'] is defined and groups['nodes'] | length > 0
          register: worker_labels

        - name: GPU Worker 노드 레이블 설정
          ansible.builtin.shell: |
            {% for node in groups['gpu_nodes'] %}
            kubectl label node {{ node }} node-role.kubernetes.io/gpu-worker=gpu-worker --overwrite
            kubectl label node {{ node }} accelerator=gpu --overwrite
            kubectl label node {{ node }} nvidia.com/gpu=true --overwrite
            {% endfor %}
          when: groups['gpu_nodes'] is defined and groups['gpu_nodes'] | length > 0
          register: gpu_labels

    - name: 클러스터 노드 상태 확인
      ansible.builtin.shell: |
        kubectl get nodes
      register: cluster_status

    - name: 클러스터 상태 출력
      ansible.builtin.debug:
        msg: "{{ cluster_status.stdout_lines }}"

    - name: 시스템 Pod 상태 확인
      ansible.builtin.shell: |
        kubectl get pods -A
      register: pods_status

    - name: Pod 상태 출력
      ansible.builtin.debug:
        msg: "{{ pods_status.stdout_lines }}"

    - name: kubeconfig 설정 완료 안내
      ansible.builtin.debug:
        msg: |
          ====================================
          GCP Kubernetes 클러스터 설정 완료!
          ====================================

          로컬 PC에서 kubectx 사용법:

          1. 환경변수 설정:
             export KUBECONFIG=${KUBECONFIG:+$KUBECONFIG:}$HOME/.kube/config-gcp-k8s

          2. 클러스터 전환:
             kubectx local-k3s    # 기존 로컬 클러스터
             kubectx gcp-k8s      # 새 GCP 클러스터

          3. 현재 컨텍스트 확인:
             kubectx

          4. 네임스페이스 관리:
             kubens <namespace>

          ====================================